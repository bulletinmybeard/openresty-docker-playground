init_by_lua_file /usr/local/openresty/nginx/lua/modules/init.lua;


server {
    listen 8080;
    server_name localhost;

    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";

    access_log /var/log/nginx.local.access.log;
    error_log  /var/log/nginx.local.error.log debug;

    default_type application/json;

    location = /lua_logs {
        # Logs messages at various severity levels (DEBUG, INFO, WARN, ERR, CRIT).
        # Returns a 204 No Content.
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/lua_logs.lua;
    }

    location = /post_data {
        # Processes POST requests with JSON payloads.
        # * Restricts allowed methods to POST.
        # * Reads and validates the request body.
        # * Decodes the JSON payload.
        # * Logs the parsed data.
        # * Returns a JSON response with processing details.
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/process_post_data.lua;
    }

    location = /json_data {
        # Creates a sample JSON payload.
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/json_data.lua;
    }

    location = /rate_limited {
        access_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/rate_limited.lua;
    }

    location = /api_token_auth {
        # Performs authentication using an API token.
        # * Retrieves the "X-API-TOKEN" header value.
        # * Checks if the token is present and matches the configured value.
        # * Returns a 401 Unauthorized response if authentication fails.
        # * Returns a simple success message if authenticated.
        access_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/api_token_auth.lua;
    }

    location = /inject_headers {
        # Custom header manipulation within the header_filter phase.
        # * Sets 'X-Content-Length' if not already present (defaults to 0).
        # * Adds a custom header 'X-Custom-Header' with a static value.
        # * Sets a dynamic 'X-Timestamp' header using the current time (ngx.time())
        header_filter_by_lua_block {
            ngx.header["X-Content-Length"] = ngx.header.content_length or 0
            ngx.header["X-Custom-Header"] = "Custom header value"
            ngx.header["X-Timestamp"] = ngx.time();
        }
        content_by_lua_block {
            ngx.say("Custom response headers")
        }
    }

    location = /jwt/sign {
        # JWT (JSON Web Token) generation logic.
        # * Requires the 'resty.jwt' library for JWT operations.
        # * Restricts allowed methods to POST.
        # * Reads and decodes the JSON payload from the request body.
        # * Signs and generates the JWT token using the configured secret.
        # * Returns the generated JWT token as the response.
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/jwt_sign.lua;
    }

    location = /jwt/verify {
        # JWT (JSON Web Token) verification logic.
        # * Requires the 'resty.jwt' library for JWT operations.
        # * Checks for the presence of an 'Authorization' header.
        # * Extracts the JWT token from the header (expects "Bearer" format).
        # * Verifies the JWT token using the configured secret.
        # * Returns the decoded JWT payload as a JSON response.
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/jwt_verify.lua;
    }

    location = /jwt/page {
        # JWT verification logic with robust error handling.
        # * Extracts the JWT token from the 'Authorization' header (expects "Bearer" format).
        # * Verifies the JWT token using the configured secret.
        # * Checks verification validity and logs the failure reason.
        # * Returns a 401 response if verification fails.
        # * Sends a success message if authentication is successful.
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/jwt_page.lua;
    }

    location = /shared_cache {
        # Demonstrates using the Nginx shared content cache.
        # * Retrieves content associated with the key "key" from the shared cache.
        # * If the content is not found (cache miss):
        #   * Stores sample content in the cache under the key "key".
        #   * Sets the cache expiration to 60 seconds.
        # * Returns the retrieved content (from the cache or freshly stored).
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/shared_cache.lua;
    }

    location = /query_params {
        # Modifies query string arguments within the rewrite phase.
        # * Retrieves the current query string arguments.
        # * Updates (or adds) the 'john' argument to have the value 'dot'.
        # * Replaces the existing query string arguments with the modified set.
        rewrite_by_lua_block {
            local args = ngx.req.get_uri_args()
            args["john"] = "dot"
            ngx.req.set_uri_args(args)
        }
        # Outputs the arguments as a JSON-encoded string.
        content_by_lua_block {
            local args = ngx.req.get_uri_args()
            ngx.say(cjson.encode(args))
        }
    }

    location = /metrics {
        # Tracks and exposes basic request metrics.
        # * Uses the ngx.shared.metrics shared memory zone to store metrics.
        # * Increments a request counter on each request.
        # * Updates the 'last_update' timestamp with the current time.
        # * Prepares a JSON payload with the collected metrics.
        # * Returns the JSON payload as the response.
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/metrics.lua;
    }

    location = /transform_image {
        # Image resizing and transformation logic, using the "magick" library (ImageMagick bindings).
        # * Requires the "magick" module for image processing.
        # * Retrieves image data from the request body.
        # * Logs the desired image dimensions (from request arguments).
        # * Loads the image from the binary data.
        # * Logs the original image dimensions.
        # * Determines final dimensions, prioritizing query arguments or defaults to original size.
        # * Logs the final dimensions used for resizing.
        # * Optionally rotates the image based on the 'arg_degrees' argument.
        # * Resizes the image.
        # * Sets the appropriate content type for a JPEG response.
        # * Sends the resized image data in the response.
        # * Releases the image object from memory.
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/transform_image.lua;
    }

    location = /request_method_restriction {
        # Restricts the allowed HTTP methods for this location block.
        # * Enforces that only GET and POST requests are processed.
        content_by_lua_block {
            allowed_request_methods("GET", "POST")
        }
    }

    location = /get_yaml_config {
        # Generates a JSON response containing config values (for illustrative purposes!).
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/yaml_config.lua;
    }

    location = /get_env_vars {
        # Demonstrates accessing environment variables in Nginx Lua.
        # * Important: Environment variables must be defined in the 'nginx.conf' file using the 'env' directive.
        # * Retrieves runtime information using os.getenv().
        # * Prepares a JSON payload containing environment variable values.
        # * Returns the JSON payload as the response.
        content_by_lua_file /usr/local/openresty/nginx/lua/entrypoints/env_vars.lua;
    }

    location = /health {
        # Defines a simple health check endpoint at the "/health" location (Used by Docker's health check).
        # * Responds with a JSON payload indicating a "healthy" status.
        content_by_lua_block {
            res_ok('{ "status": "healthy" }');
        }
    }

    location = / {
        content_by_lua_block {
            res_ok("OK")
        }
    }

    # Defines custom error pages for HTTP status codes: 400, 401, 404, 500, 502, 503.
    # * Redirects these errors to the internal location @custom_error
    error_page 400 401 404 500 502 503 @custom_error;

    # Handles error responses within the @custom_error location.
    # * Maps HTTP status codes to user-friendly error messages.
    # * Provides a fallback message for unhandled error codes.
    # * Sets the response status code and outputs the error message.
    location @custom_error {
        content_by_lua_block {
            local messages = {
                ["400"] = "404 - Bad Request",
                ["401"] = "401 - Unauthorized",
                ["404"] = "404 - Page Not Found",
                ["500"] = "500 - Internal Server Error",
                ["502"] = "502 - Bad Gateway",
                ["503"] = "503 - Service Unavailable"
            }

            local status = tostring(ngx.status)
            local message = messages[status] or "An unexpected error has occurred"

            ngx.status = ngx.status
            ngx.say(message)
            ngx.exit(ngx.status)
        }
    }
}
